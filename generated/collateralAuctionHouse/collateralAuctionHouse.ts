// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddAuthorization extends ethereum.Event {
  get params(): AddAuthorization__Params {
    return new AddAuthorization__Params(this);
  }
}

export class AddAuthorization__Params {
  _event: AddAuthorization;

  constructor(event: AddAuthorization) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BuyCollateral extends ethereum.Event {
  get params(): BuyCollateral__Params {
    return new BuyCollateral__Params(this);
  }
}

export class BuyCollateral__Params {
  _event: BuyCollateral;

  constructor(event: BuyCollateral) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _blockTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _raisedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _soldAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ModifyParameters extends ethereum.Event {
  get params(): ModifyParameters__Params {
    return new ModifyParameters__Params(this);
  }
}

export class ModifyParameters__Params {
  _event: ModifyParameters;

  constructor(event: ModifyParameters) {
    this._event = event;
  }

  get _param(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _cType(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RemoveAuthorization extends ethereum.Event {
  get params(): RemoveAuthorization__Params {
    return new RemoveAuthorization__Params(this);
  }
}

export class RemoveAuthorization__Params {
  _event: RemoveAuthorization;

  constructor(event: RemoveAuthorization) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SettleAuction extends ethereum.Event {
  get params(): SettleAuction__Params {
    return new SettleAuction__Params(this);
  }
}

export class SettleAuction__Params {
  _event: SettleAuction;

  constructor(event: SettleAuction) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _blockTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _leftoverReceiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _leftoverCollateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StartAuction extends ethereum.Event {
  get params(): StartAuction__Params {
    return new StartAuction__Params(this);
  }
}

export class StartAuction__Params {
  _event: StartAuction;

  constructor(event: StartAuction) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _blockTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amountToSell(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amountToRaise(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _initialDiscount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _maxDiscount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _perSecondDiscountUpdateRate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class TerminateAuctionPrematurely extends ethereum.Event {
  get params(): TerminateAuctionPrematurely__Params {
    return new TerminateAuctionPrematurely__Params(this);
  }
}

export class TerminateAuctionPrematurely__Params {
  _event: TerminateAuctionPrematurely;

  constructor(event: TerminateAuctionPrematurely) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _blockTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _leftoverReceiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _leftoverCollateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class collateralAuctionHouse___auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    return map;
  }

  getAmountToSell(): BigInt {
    return this.value0;
  }

  getAmountToRaise(): BigInt {
    return this.value1;
  }

  getCurrentDiscount(): BigInt {
    return this.value2;
  }

  getMaxDiscount(): BigInt {
    return this.value3;
  }

  getPerSecondDiscountUpdateRate(): BigInt {
    return this.value4;
  }

  getLatestDiscountUpdateTime(): BigInt {
    return this.value5;
  }

  getForgoneCollateralReceiver(): Address {
    return this.value6;
  }

  getAuctionIncomeRecipient(): Address {
    return this.value7;
  }
}

export class collateralAuctionHouse___cParamsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getMinimumBid(): BigInt {
    return this.value0;
  }

  getMinDiscount(): BigInt {
    return this.value1;
  }

  getMaxDiscount(): BigInt {
    return this.value2;
  }

  getPerSecondDiscountUpdateRate(): BigInt {
    return this.value3;
  }

  getLowerCollateralDeviation(): BigInt {
    return this.value4;
  }

  getUpperCollateralDeviation(): BigInt {
    return this.value5;
  }
}

export class collateralAuctionHouse___paramsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_minSystemCoinDeviation(): BigInt {
    return this.value0;
  }

  get_lowerSystemCoinDeviation(): BigInt {
    return this.value1;
  }

  get_upperSystemCoinDeviation(): BigInt {
    return this.value2;
  }
}

export class collateralAuctionHouse__auctionsResult_auctionStruct extends ethereum.Tuple {
  get amountToSell(): BigInt {
    return this[0].toBigInt();
  }

  get amountToRaise(): BigInt {
    return this[1].toBigInt();
  }

  get currentDiscount(): BigInt {
    return this[2].toBigInt();
  }

  get maxDiscount(): BigInt {
    return this[3].toBigInt();
  }

  get perSecondDiscountUpdateRate(): BigInt {
    return this[4].toBigInt();
  }

  get latestDiscountUpdateTime(): BigInt {
    return this[5].toBigInt();
  }

  get forgoneCollateralReceiver(): Address {
    return this[6].toAddress();
  }

  get auctionIncomeRecipient(): Address {
    return this[7].toAddress();
  }
}

export class collateralAuctionHouse__cParamsResult_cahCParamsStruct extends ethereum.Tuple {
  get minimumBid(): BigInt {
    return this[0].toBigInt();
  }

  get minDiscount(): BigInt {
    return this[1].toBigInt();
  }

  get maxDiscount(): BigInt {
    return this[2].toBigInt();
  }

  get perSecondDiscountUpdateRate(): BigInt {
    return this[3].toBigInt();
  }

  get lowerCollateralDeviation(): BigInt {
    return this[4].toBigInt();
  }

  get upperCollateralDeviation(): BigInt {
    return this[5].toBigInt();
  }
}

export class collateralAuctionHouse__getAdjustedBidResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_valid(): boolean {
    return this.value0;
  }

  get_adjustedBid(): BigInt {
    return this.value1;
  }
}

export class collateralAuctionHouse__getApproximateCollateralBoughtResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_boughtCollateral(): BigInt {
    return this.value0;
  }

  get_adjustedBid(): BigInt {
    return this.value1;
  }
}

export class collateralAuctionHouse__getCollateralBoughtResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_boughtCollateral(): BigInt {
    return this.value0;
  }

  get_adjustedBid(): BigInt {
    return this.value1;
  }
}

export class collateralAuctionHouse__getCollateralFSMAndFinalSystemCoinPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_cFsmPriceFeedValue(): BigInt {
    return this.value0;
  }

  get_sCoinAdjustedPrice(): BigInt {
    return this.value1;
  }
}

export class collateralAuctionHouse__paramsResult_cahParamsStruct extends ethereum.Tuple {
  get minSystemCoinDeviation(): BigInt {
    return this[0].toBigInt();
  }

  get lowerSystemCoinDeviation(): BigInt {
    return this[1].toBigInt();
  }

  get upperSystemCoinDeviation(): BigInt {
    return this[2].toBigInt();
  }
}

export class collateralAuctionHouse extends ethereum.SmartContract {
  static bind(address: Address): collateralAuctionHouse {
    return new collateralAuctionHouse("collateralAuctionHouse", address);
  }

  AUCTION_HOUSE_TYPE(): Bytes {
    let result = super.call(
      "AUCTION_HOUSE_TYPE",
      "AUCTION_HOUSE_TYPE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_AUCTION_HOUSE_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "AUCTION_HOUSE_TYPE",
      "AUCTION_HOUSE_TYPE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  AUCTION_TYPE(): Bytes {
    let result = super.call("AUCTION_TYPE", "AUCTION_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_AUCTION_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("AUCTION_TYPE", "AUCTION_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _auctions(_auctionId: BigInt): collateralAuctionHouse___auctionsResult {
    let result = super.call(
      "_auctions",
      "_auctions(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return new collateralAuctionHouse___auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toAddress()
    );
  }

  try__auctions(
    _auctionId: BigInt
  ): ethereum.CallResult<collateralAuctionHouse___auctionsResult> {
    let result = super.tryCall(
      "_auctions",
      "_auctions(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse___auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toAddress()
      )
    );
  }

  _cParams(): collateralAuctionHouse___cParamsResult {
    let result = super.call(
      "_cParams",
      "_cParams():(uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new collateralAuctionHouse___cParamsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try__cParams(): ethereum.CallResult<collateralAuctionHouse___cParamsResult> {
    let result = super.tryCall(
      "_cParams",
      "_cParams():(uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse___cParamsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  _params(): collateralAuctionHouse___paramsResult {
    let result = super.call(
      "_params",
      "_params():(uint256,uint256,uint256)",
      []
    );

    return new collateralAuctionHouse___paramsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try__params(): ethereum.CallResult<collateralAuctionHouse___paramsResult> {
    let result = super.tryCall(
      "_params",
      "_params():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse___paramsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  amountToRaise(_id: BigInt): BigInt {
    let result = super.call(
      "amountToRaise",
      "amountToRaise(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_amountToRaise(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountToRaise",
      "amountToRaise(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctions(
    _auctionId: BigInt
  ): collateralAuctionHouse__auctionsResult_auctionStruct {
    let result = super.call(
      "auctions",
      "auctions(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return changetype<collateralAuctionHouse__auctionsResult_auctionStruct>(
      result[0].toTuple()
    );
  }

  try_auctions(
    _auctionId: BigInt
  ): ethereum.CallResult<collateralAuctionHouse__auctionsResult_auctionStruct> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<collateralAuctionHouse__auctionsResult_auctionStruct>(
        value[0].toTuple()
      )
    );
  }

  auctionsStarted(): BigInt {
    let result = super.call(
      "auctionsStarted",
      "auctionsStarted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionsStarted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionsStarted",
      "auctionsStarted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorizedAccounts(_account: Address): boolean {
    let result = super.call(
      "authorizedAccounts",
      "authorizedAccounts(address):(bool)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBoolean();
  }

  try_authorizedAccounts(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizedAccounts",
      "authorizedAccounts(address):(bool)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authorizedAccounts1(): Array<Address> {
    let result = super.call(
      "authorizedAccounts",
      "authorizedAccounts():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_authorizedAccounts1(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "authorizedAccounts",
      "authorizedAccounts():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  bidAmount(param0: BigInt): BigInt {
    let result = super.call("bidAmount", "bidAmount(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_bidAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidAmount", "bidAmount(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cParams(): collateralAuctionHouse__cParamsResult_cahCParamsStruct {
    let result = super.call(
      "cParams",
      "cParams():((uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<collateralAuctionHouse__cParamsResult_cahCParamsStruct>(
      result[0].toTuple()
    );
  }

  try_cParams(): ethereum.CallResult<
    collateralAuctionHouse__cParamsResult_cahCParamsStruct
  > {
    let result = super.tryCall(
      "cParams",
      "cParams():((uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<collateralAuctionHouse__cParamsResult_cahCParamsStruct>(
        value[0].toTuple()
      )
    );
  }

  collateralType(): Bytes {
    let result = super.call("collateralType", "collateralType():(bytes32)", []);

    return result[0].toBytes();
  }

  try_collateralType(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "collateralType",
      "collateralType():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  forgoneCollateralReceiver(_id: BigInt): Address {
    let result = super.call(
      "forgoneCollateralReceiver",
      "forgoneCollateralReceiver(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toAddress();
  }

  try_forgoneCollateralReceiver(_id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "forgoneCollateralReceiver",
      "forgoneCollateralReceiver(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAdjustedBid(
    _id: BigInt,
    _wad: BigInt
  ): collateralAuctionHouse__getAdjustedBidResult {
    let result = super.call(
      "getAdjustedBid",
      "getAdjustedBid(uint256,uint256):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_wad)
      ]
    );

    return new collateralAuctionHouse__getAdjustedBidResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getAdjustedBid(
    _id: BigInt,
    _wad: BigInt
  ): ethereum.CallResult<collateralAuctionHouse__getAdjustedBidResult> {
    let result = super.tryCall(
      "getAdjustedBid",
      "getAdjustedBid(uint256,uint256):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_wad)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse__getAdjustedBidResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getApproximateCollateralBought(
    _id: BigInt,
    _wad: BigInt
  ): collateralAuctionHouse__getApproximateCollateralBoughtResult {
    let result = super.call(
      "getApproximateCollateralBought",
      "getApproximateCollateralBought(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_wad)
      ]
    );

    return new collateralAuctionHouse__getApproximateCollateralBoughtResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getApproximateCollateralBought(
    _id: BigInt,
    _wad: BigInt
  ): ethereum.CallResult<
    collateralAuctionHouse__getApproximateCollateralBoughtResult
  > {
    let result = super.tryCall(
      "getApproximateCollateralBought",
      "getApproximateCollateralBought(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_wad)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse__getApproximateCollateralBoughtResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getCollateralBought(
    _id: BigInt,
    _wad: BigInt
  ): collateralAuctionHouse__getCollateralBoughtResult {
    let result = super.call(
      "getCollateralBought",
      "getCollateralBought(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_wad)
      ]
    );

    return new collateralAuctionHouse__getCollateralBoughtResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCollateralBought(
    _id: BigInt,
    _wad: BigInt
  ): ethereum.CallResult<collateralAuctionHouse__getCollateralBoughtResult> {
    let result = super.tryCall(
      "getCollateralBought",
      "getCollateralBought(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_wad)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse__getCollateralBoughtResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getCollateralFSMAndFinalSystemCoinPrices(
    _systemCoinRedemptionPrice: BigInt
  ): collateralAuctionHouse__getCollateralFSMAndFinalSystemCoinPricesResult {
    let result = super.call(
      "getCollateralFSMAndFinalSystemCoinPrices",
      "getCollateralFSMAndFinalSystemCoinPrices(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_systemCoinRedemptionPrice)]
    );

    return new collateralAuctionHouse__getCollateralFSMAndFinalSystemCoinPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCollateralFSMAndFinalSystemCoinPrices(
    _systemCoinRedemptionPrice: BigInt
  ): ethereum.CallResult<
    collateralAuctionHouse__getCollateralFSMAndFinalSystemCoinPricesResult
  > {
    let result = super.tryCall(
      "getCollateralFSMAndFinalSystemCoinPrices",
      "getCollateralFSMAndFinalSystemCoinPrices(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_systemCoinRedemptionPrice)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new collateralAuctionHouse__getCollateralFSMAndFinalSystemCoinPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getCollateralMarketPrice(): BigInt {
    let result = super.call(
      "getCollateralMarketPrice",
      "getCollateralMarketPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCollateralMarketPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralMarketPrice",
      "getCollateralMarketPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDiscountedCollateralPrice(
    _collateralFsmPriceFeedValue: BigInt,
    _collateralMarketPriceFeedValue: BigInt,
    _systemCoinPriceFeedValue: BigInt,
    _customDiscount: BigInt
  ): BigInt {
    let result = super.call(
      "getDiscountedCollateralPrice",
      "getDiscountedCollateralPrice(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_collateralFsmPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_collateralMarketPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_systemCoinPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_customDiscount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDiscountedCollateralPrice(
    _collateralFsmPriceFeedValue: BigInt,
    _collateralMarketPriceFeedValue: BigInt,
    _systemCoinPriceFeedValue: BigInt,
    _customDiscount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDiscountedCollateralPrice",
      "getDiscountedCollateralPrice(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_collateralFsmPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_collateralMarketPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_systemCoinPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_customDiscount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFinalBaseCollateralPrice(
    _collateralFsmPriceFeedValue: BigInt,
    _collateralMarketPriceFeedValue: BigInt
  ): BigInt {
    let result = super.call(
      "getFinalBaseCollateralPrice",
      "getFinalBaseCollateralPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_collateralFsmPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_collateralMarketPriceFeedValue)
      ]
    );

    return result[0].toBigInt();
  }

  try_getFinalBaseCollateralPrice(
    _collateralFsmPriceFeedValue: BigInt,
    _collateralMarketPriceFeedValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFinalBaseCollateralPrice",
      "getFinalBaseCollateralPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_collateralFsmPriceFeedValue),
        ethereum.Value.fromUnsignedBigInt(_collateralMarketPriceFeedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFinalSystemCoinPrice(
    _systemCoinRedemptionPrice: BigInt,
    _systemCoinMarketPrice: BigInt
  ): BigInt {
    let result = super.call(
      "getFinalSystemCoinPrice",
      "getFinalSystemCoinPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_systemCoinRedemptionPrice),
        ethereum.Value.fromUnsignedBigInt(_systemCoinMarketPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_getFinalSystemCoinPrice(
    _systemCoinRedemptionPrice: BigInt,
    _systemCoinMarketPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFinalSystemCoinPrice",
      "getFinalSystemCoinPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_systemCoinRedemptionPrice),
        ethereum.Value.fromUnsignedBigInt(_systemCoinMarketPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextCurrentDiscount(_id: BigInt): BigInt {
    let result = super.call(
      "getNextCurrentDiscount",
      "getNextCurrentDiscount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_getNextCurrentDiscount(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextCurrentDiscount",
      "getNextCurrentDiscount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSystemCoinCeilingDeviatedPrice(_redemptionPrice: BigInt): BigInt {
    let result = super.call(
      "getSystemCoinCeilingDeviatedPrice",
      "getSystemCoinCeilingDeviatedPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_redemptionPrice)]
    );

    return result[0].toBigInt();
  }

  try_getSystemCoinCeilingDeviatedPrice(
    _redemptionPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSystemCoinCeilingDeviatedPrice",
      "getSystemCoinCeilingDeviatedPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_redemptionPrice)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSystemCoinFloorDeviatedPrice(_redemptionPrice: BigInt): BigInt {
    let result = super.call(
      "getSystemCoinFloorDeviatedPrice",
      "getSystemCoinFloorDeviatedPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_redemptionPrice)]
    );

    return result[0].toBigInt();
  }

  try_getSystemCoinFloorDeviatedPrice(
    _redemptionPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSystemCoinFloorDeviatedPrice",
      "getSystemCoinFloorDeviatedPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_redemptionPrice)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSystemCoinMarketPrice(): BigInt {
    let result = super.call(
      "getSystemCoinMarketPrice",
      "getSystemCoinMarketPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSystemCoinMarketPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSystemCoinMarketPrice",
      "getSystemCoinMarketPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastReadRedemptionPrice(): BigInt {
    let result = super.call(
      "lastReadRedemptionPrice",
      "lastReadRedemptionPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastReadRedemptionPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastReadRedemptionPrice",
      "lastReadRedemptionPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationEngine(): Address {
    let result = super.call(
      "liquidationEngine",
      "liquidationEngine():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidationEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidationEngine",
      "liquidationEngine():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleRelayer(): Address {
    let result = super.call("oracleRelayer", "oracleRelayer():(address)", []);

    return result[0].toAddress();
  }

  try_oracleRelayer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleRelayer",
      "oracleRelayer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  params(): collateralAuctionHouse__paramsResult_cahParamsStruct {
    let result = super.call(
      "params",
      "params():((uint256,uint256,uint256))",
      []
    );

    return changetype<collateralAuctionHouse__paramsResult_cahParamsStruct>(
      result[0].toTuple()
    );
  }

  try_params(): ethereum.CallResult<
    collateralAuctionHouse__paramsResult_cahParamsStruct
  > {
    let result = super.tryCall(
      "params",
      "params():((uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<collateralAuctionHouse__paramsResult_cahParamsStruct>(
        value[0].toTuple()
      )
    );
  }

  raisedAmount(param0: BigInt): BigInt {
    let result = super.call("raisedAmount", "raisedAmount(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_raisedAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "raisedAmount",
      "raisedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingAmountToSell(_id: BigInt): BigInt {
    let result = super.call(
      "remainingAmountToSell",
      "remainingAmountToSell(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_remainingAmountToSell(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingAmountToSell",
      "remainingAmountToSell(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeEngine(): Address {
    let result = super.call("safeEngine", "safeEngine():(address)", []);

    return result[0].toAddress();
  }

  try_safeEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall("safeEngine", "safeEngine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startAuction(
    _forgoneCollateralReceiver: Address,
    _auctionIncomeRecipient: Address,
    _amountToRaise: BigInt,
    _amountToSell: BigInt
  ): BigInt {
    let result = super.call(
      "startAuction",
      "startAuction(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_forgoneCollateralReceiver),
        ethereum.Value.fromAddress(_auctionIncomeRecipient),
        ethereum.Value.fromUnsignedBigInt(_amountToRaise),
        ethereum.Value.fromUnsignedBigInt(_amountToSell)
      ]
    );

    return result[0].toBigInt();
  }

  try_startAuction(
    _forgoneCollateralReceiver: Address,
    _auctionIncomeRecipient: Address,
    _amountToRaise: BigInt,
    _amountToSell: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startAuction",
      "startAuction(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_forgoneCollateralReceiver),
        ethereum.Value.fromAddress(_auctionIncomeRecipient),
        ethereum.Value.fromUnsignedBigInt(_amountToRaise),
        ethereum.Value.fromUnsignedBigInt(_amountToSell)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _safeEngine(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleRelayer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _liquidationEngine(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _cType(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _cahParams(): ConstructorCall_cahParamsStruct {
    return changetype<ConstructorCall_cahParamsStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }

  get _cahCParams(): ConstructorCall_cahCParamsStruct {
    return changetype<ConstructorCall_cahCParamsStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_cahParamsStruct extends ethereum.Tuple {
  get minSystemCoinDeviation(): BigInt {
    return this[0].toBigInt();
  }

  get lowerSystemCoinDeviation(): BigInt {
    return this[1].toBigInt();
  }

  get upperSystemCoinDeviation(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConstructorCall_cahCParamsStruct extends ethereum.Tuple {
  get minimumBid(): BigInt {
    return this[0].toBigInt();
  }

  get minDiscount(): BigInt {
    return this[1].toBigInt();
  }

  get maxDiscount(): BigInt {
    return this[2].toBigInt();
  }

  get perSecondDiscountUpdateRate(): BigInt {
    return this[3].toBigInt();
  }

  get lowerCollateralDeviation(): BigInt {
    return this[4].toBigInt();
  }

  get upperCollateralDeviation(): BigInt {
    return this[5].toBigInt();
  }
}

export class AddAuthorizationCall extends ethereum.Call {
  get inputs(): AddAuthorizationCall__Inputs {
    return new AddAuthorizationCall__Inputs(this);
  }

  get outputs(): AddAuthorizationCall__Outputs {
    return new AddAuthorizationCall__Outputs(this);
  }
}

export class AddAuthorizationCall__Inputs {
  _call: AddAuthorizationCall;

  constructor(call: AddAuthorizationCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAuthorizationCall__Outputs {
  _call: AddAuthorizationCall;

  constructor(call: AddAuthorizationCall) {
    this._call = call;
  }
}

export class BuyCollateralCall extends ethereum.Call {
  get inputs(): BuyCollateralCall__Inputs {
    return new BuyCollateralCall__Inputs(this);
  }

  get outputs(): BuyCollateralCall__Outputs {
    return new BuyCollateralCall__Outputs(this);
  }
}

export class BuyCollateralCall__Inputs {
  _call: BuyCollateralCall;

  constructor(call: BuyCollateralCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wad(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCollateralCall__Outputs {
  _call: BuyCollateralCall;

  constructor(call: BuyCollateralCall) {
    this._call = call;
  }
}

export class GetCollateralBoughtCall extends ethereum.Call {
  get inputs(): GetCollateralBoughtCall__Inputs {
    return new GetCollateralBoughtCall__Inputs(this);
  }

  get outputs(): GetCollateralBoughtCall__Outputs {
    return new GetCollateralBoughtCall__Outputs(this);
  }
}

export class GetCollateralBoughtCall__Inputs {
  _call: GetCollateralBoughtCall;

  constructor(call: GetCollateralBoughtCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wad(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetCollateralBoughtCall__Outputs {
  _call: GetCollateralBoughtCall;

  constructor(call: GetCollateralBoughtCall) {
    this._call = call;
  }

  get _boughtCollateral(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _adjustedBid(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ModifyParametersCall extends ethereum.Call {
  get inputs(): ModifyParametersCall__Inputs {
    return new ModifyParametersCall__Inputs(this);
  }

  get outputs(): ModifyParametersCall__Outputs {
    return new ModifyParametersCall__Outputs(this);
  }
}

export class ModifyParametersCall__Inputs {
  _call: ModifyParametersCall;

  constructor(call: ModifyParametersCall) {
    this._call = call;
  }

  get _cType(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _param(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ModifyParametersCall__Outputs {
  _call: ModifyParametersCall;

  constructor(call: ModifyParametersCall) {
    this._call = call;
  }
}

export class ModifyParameters1Call extends ethereum.Call {
  get inputs(): ModifyParameters1Call__Inputs {
    return new ModifyParameters1Call__Inputs(this);
  }

  get outputs(): ModifyParameters1Call__Outputs {
    return new ModifyParameters1Call__Outputs(this);
  }
}

export class ModifyParameters1Call__Inputs {
  _call: ModifyParameters1Call;

  constructor(call: ModifyParameters1Call) {
    this._call = call;
  }

  get _param(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ModifyParameters1Call__Outputs {
  _call: ModifyParameters1Call;

  constructor(call: ModifyParameters1Call) {
    this._call = call;
  }
}

export class RemoveAuthorizationCall extends ethereum.Call {
  get inputs(): RemoveAuthorizationCall__Inputs {
    return new RemoveAuthorizationCall__Inputs(this);
  }

  get outputs(): RemoveAuthorizationCall__Outputs {
    return new RemoveAuthorizationCall__Outputs(this);
  }
}

export class RemoveAuthorizationCall__Inputs {
  _call: RemoveAuthorizationCall;

  constructor(call: RemoveAuthorizationCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAuthorizationCall__Outputs {
  _call: RemoveAuthorizationCall;

  constructor(call: RemoveAuthorizationCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get _forgoneCollateralReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _auctionIncomeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountToRaise(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountToSell(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TerminateAuctionPrematurelyCall extends ethereum.Call {
  get inputs(): TerminateAuctionPrematurelyCall__Inputs {
    return new TerminateAuctionPrematurelyCall__Inputs(this);
  }

  get outputs(): TerminateAuctionPrematurelyCall__Outputs {
    return new TerminateAuctionPrematurelyCall__Outputs(this);
  }
}

export class TerminateAuctionPrematurelyCall__Inputs {
  _call: TerminateAuctionPrematurelyCall;

  constructor(call: TerminateAuctionPrematurelyCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TerminateAuctionPrematurelyCall__Outputs {
  _call: TerminateAuctionPrematurelyCall;

  constructor(call: TerminateAuctionPrematurelyCall) {
    this._call = call;
  }
}
